#ifndef SPC1_WRAPPER_H_
#define SPC1_WRAPPER_H_

// To set no limits on reads and writes set these to -1
#define maxReads -1
#define maxWrites -1
//#define maxReads 5
//#define maxWrites 5
extern unsigned numReads;
extern unsigned numWrites;

#define PNAME "fio (v1.36)"

#define BLOCK_SIZE_KB 4

#define GIGABYTE 1073741824
#define MEGABYTE 1048576
#define KILOBYTE 1024

#define GB_TO_BLOCK( g ) ( (g)*(GIGABYTE/KILOBYTE)/BLOCK_SIZE_KB )
#define BLOCK_TO_B( b ) ( (b)*BLOCK_SIZE_KB*KILOBYTE )

#define BUFLEN 1000

#define RUN_NO_SPLIT 0
#define RUN_ALL_SPLIT 1
#define RUN_ASU_SPLIT 2
#define RUN_BSU_SPLIT 3

#define ASU 3

#define STREAMS 8

#define ASU1FIRST 0
#define ASU2FIRST 4
#define ASU3FIRST 7

#define AVG_IOPS 50

#define TOTAL_TIME_SECS( h, m, s ) ( 60*60*(h) + 60*(m) + (s) )
#define IN_MILLIS( s ) ( 1000*(s) )

#ifndef _SPC1_H
#define _SPC1_H
#include "spc1.h"
#endif

#include "fio.h"
#include "flist.h"

struct spc1_options {
	short use_spc1;

	unsigned run_split; /* 0 = single process, 1 = multiple processes, 2 = multiple threads */

	int BSU_number; /* Number of BSUs in total, int as may be compared to -1 for single process BSU */
	unsigned BSU_first_context; /* First BSU context generated by fio */
	unsigned BSU_last_context;  /* Last BSU context generated by fio */

	unsigned min_iops_generated; /* The minimum number of IOPs generated */

	unsigned runtime_hrs;  /* The hours of the SPC-1 runtime */
	unsigned runtime_mins; /* The minutes of the SPC-1 runtime */
	unsigned runtime_secs; /* The seconds of the SPC-1 runtime */
	unsigned runtime_millis; /* The millisseconds of the SPC-1 runtime */

	unsigned fio_hrs;
	unsigned fio_mins;
	unsigned fio_secs;
	unsigned fio_millis;

	short use_asu[ASU];         /* Are IOPs for ASU[i] being generated? */
	char asu_name[ASU][BUFLEN]; /* The full path name for the ASU[i] device */
	unsigned asu_size[ASU];     /* The size of the ASU[i] device */

	long long iops_info_every; /* How often to generate IOPs info */
	long long iops_all_after;  /* When to start generating all IOPs info */
};

extern struct spc1_options global_spc1_opts;

extern size_t spc1meter(const void *el);
extern int spc1compare(const void *a, const void *b);

struct spc1_io_entry {
	struct spc1_io_s io;
	struct flist_head list;
};

extern int spc1_entry_compare(void *priv,
		struct flist_head *a,
		struct flist_head *b);

extern int flist_count(struct flist_head *head);

extern struct flist_head ** iostore;

extern void set_spc1_options();

extern void copy_spc1_options(struct spc1_options * destination, struct spc1_options * source);

extern int filter_spc1_ios(struct thread_data *td, const char *jobname);

extern unsigned spc1_context_from_bsu(unsigned bsu);

extern int gen_spc1_ios();

extern char* gen_spc1_file(char *string, unsigned int *global_addr,
		unsigned int *line_addr, int *bsu_addr, int *str_addr);

extern int init_spc1_io(struct thread_data *td);
extern int fin_spc1_io(struct thread_data *td);

extern int get_spc1_io(struct thread_data *td, struct io_u *io_u_addr);

extern void spc1_io_debug_info(const char *pre, struct spc1_io_s *spc1_io_s_addr);
extern void fio_io_debug_info(const char *pre, struct io_u *io_u_addr);

#endif /*SPC1_WRAPPER_H_*/
